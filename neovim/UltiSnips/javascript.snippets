# ESLint
snippet eslint-ignore-line
// eslint-disable-line
endsnippet

# Comments
snippet com-sin
/** $1 */
endsnippet

snippet com-mul
/**
 * $1
 */
endsnippet

# Functions
snippet function "Function"
/**
 * ${1:Function description}
 *
 * @param {Type} argName - Arg long description
 * @returns {Type} description
 */
function ${2:Name} ($3) {
	$4
}
endsnippet

snippet object-method "Object method"
/**
 * ${1:Function description}
 *
 * @param {Type} argName - Arg long description
 * @returns {Type} description
 */
${2:Name}: ($3) => {
	$4
}
endsnippet

snippet function-anonymous "Anonymous function"
/**
 * ${1:Function description}
 *
 * @param {Type} argName - Arg long description
 * @returns {Type} description
 */
($2) => {
	$3
}
endsnippet

snippet async-function "Asynchronous function"
/**
 * ${1:Function description}
 *
 * @async
 * @param {Type} argName - Arg long description
 * @returns {Type} description
 */
async function ${2:Name} ($3) {
	$4
}
endsnippet

snippet async-function-anonymous "Asynchronous anonymous function"
/**
 * ${1:Function description}
 *
 * @async
 * @param {Type} argName - Arg long description
 * @returns {Type} description
 */
async function ($2) {
	$3
}
endsnippet

snippet async-function-execution
/**
 * Asynchronous code execution
 *
 * @async
 * @throws Will throw an error to the console if it catches one
 */
(async () => {
	try {
		$1
	} catch (error) {
		console.log(error)
	}
}())
endsnippet

# ENSBV boilerplate
snippet model-make "Generate a model file"
/**
 * $1 Model
 * ${2:Description}
 *
 * @author Daniel Medina
 * Date: `system("date +%Y-%m-%d")`
 */

/** Configs imports */
import {url} from '../../config/database'

/** Modules imports */
import mongoose from 'mongoose'

/** Models imports */

/** Libs imports */

const connection = mongoose.createConnection(url)
mongoose.Promise = global.Promise
const Schema = mongoose.Schema
const $1Schema = new Schema({
	created: Date
}, {
	collection: '$3'
})

module.exports = connection.model('$1', $1Schema)
endsnippet

snippet model-ref-make "Generate a model ref file"
/**
 * $1 Model
 * ${2:Description}
 *
 * @see ${3:Parent model}
 * @author Daniel Medina
 * Date: `system("date +%Y-%m-%d")`
 */

/** Configs imports */
import {url} from '../../config/database'

/** Modules imports */
import mongoose from 'mongoose'

/** Models imports */

/** Libs imports */

const Schema = mongoose.Schema
const connection = mongoose.createConnection(url)

mongoose.Promise = global.Promise

const $1Schema = new Schema({
	created: Date
}, {
	collection: '$3'
})

const $1 = connection.model('$1', $1Schema)

export { $1Schema, $1 }
endsnippet

snippet view-make "Generate a view file"
extends ../layout.pug

block content
	$1
endsnippet

snippet controller-make "Generate a controller file"
/**
 * $1 Controller
 * ${2:Description}
 *
 * @author Daniel Medina
 * Date: `system("date +%Y-%m-%d")`
 */

/** Configs imports */

/** Modules imports */

/** Models imports */

/** Libs imports */

module.exports = {
	// getIndex {{{
	getIndex: (request, response) => {
		/** ... */
	},
	// }}}
	// postIndex {{{
	postIndex: (request, response) => {
		/** ... */
	}
	// }}}
}
endsnippet

snippet middleware-make "Generate a middleware file"
/**
 * $1 Middleware
 * ${2:Description}
 *
 * @author Daniel Medina
 * Date: `system("date +%Y-%m-%d")`
 */

/** Configs imports */

/** Modules imports */

/** Models imports */

/** Libs imports */

module.exports = {
	// middleware {{{
	middleware: (request, response, next) => {
		next()
	}
	// }}}
}
endsnippet

snippet controller-insert "Insert a new controller"
// $1 {{{
$1: (request, response) => {
	/** Return or render something ... */
}
// }}}
endsnippet

snippet middleware-insert "Insert a new middleware"
// $1 {{{
$1: (request, response, next) => {
	next()
}
// }}}
endsnippet

snippet flash-error
request.flash('error', '$1')
endsnippet

snippet flash-success
request.flash('success', '$1')
endsnippet

snippet redirect-back
response.redirect('back')
endsnippet
