# ESLint
snippet eslint-disable-line "Eslint - disable line"
// eslint-disable-line
endsnippet

# Comments
snippet comment-single "Single line comment"
/** $1 */
endsnippet

snippet comment-multi "Multi line comment"
/**
 * $1
 */
endsnippet

# Functions
snippet function "Function"
// Function: ${1:Name} {{{
/**
 * ${2:Function description}
 *
 * @param {Type} tag Description
 * @returns {Type} tag
 */
function $1 (${3:Args}) {
	$4
}
// }}}
endsnippet

snippet object-method "Object method"
// Method: ${1:Name} {{{
/**
 * ${2:Function description}
 *
 * @param {Type} tag Description
 * @returns {Type} tag
 */
$1: $3 => $4
// }}}
endsnippet

snippet object-method-async "Object method - asynchronous"
// Method: ${1:Name} {{{
/**
 * ${2:Function description}
 *
 * @async
 * @param {Type} tag Description
 * @returns {Type} tag
 */
$1: async $3 => $4
// }}}
endsnippet

snippet vue-default-template "Vue - default template file"
<template lang='pug'>
</template>

<script>
	export default {
		data () {
			return {}
		},
		created () {
		},
		method: {}
	}
</script>

<style lang="scss" scoped>
</style>
endsnippet

snippet vue-method "Vue - method"
// Method: ${1:Name} {{{
/**
 * ${2:Method description}
 *
 * @param {Type} tag Description
 * @returns {Type} tag
 */
$1: function (${3:args}) {
	$4
}
// }}}
endsnippet

snippet vue-watcher "Vue - watcher"
// Watch: ${1:Name} {{{
/**
 * ${2:Watcher description}
 *
 * @param {Type} tag Description
 * @returns {Type} tag
 */
$1: function (${3:args}) {
	$4
}
// }}}
endsnippet

snippet function-arrow-named "Named arrow function"
// Function: ${1:Name} {{{
/**
 * ${2:Function description}
 *
 * @param {Type} tag Description
 * @returns {Type} tag
 */
const $1 = $3 => {
	$4
}
// }}}
endsnippet

snippet function-anonymous "Anonymous function"
// Anonymous function {{{
/**
 * ${1:Function description}
 *
 * @param {Type} tag Description
 * @returns {Type} tag
 */
function ($2) {
	$3
}
// }}}
endsnippet

snippet function-async "Asynchronous function"
// Function: ${1:Name} {{{
/**
 * ${2:Function description}
 *
 * @async
 * @param {Type} tag Description
 * @returns {Type} tag
 */
async function $1 ($3) {
	$4
}
// }}}
endsnippet

snippet function-anonymous-async "Asynchronous anonymous function"
// Anonymous function {{{
/**
 * ${1:Function description}
 *
 * @async
 * @param {Type} tag Description
 * @returns {Type} tag
 */
async function ($2) {
	$3
}
// }}}
endsnippet

snippet function-exec-async "Asynchronous code execution"
/**
 * Asynchronous code execution
 *
 * @async
 * @throws Will throw an error to the console if it catches one
 */
(async function () {
	try {
		$1
	} catch (error) {
		console.log(error)
	}
}())
endsnippet

snippet model-file "Generate a model file"
/**
 * $1 Model
 * ${2:Description}
 *
 * @author Daniel Medina
 * Date: `system("date +%Y-%m-%d")`
 */

/** Configs imports */
import {url} from '../../config/database'

/** Modules imports */
import mongoose from 'mongoose'

/** Models imports */

const connection = mongoose.createConnection(url)
mongoose.Promise = global.Promise
const Schema = mongoose.Schema
const $1Schema = new Schema({
	created: Date
}, {
	collection: '$3'
})

module.exports = connection.model('$1', $1Schema)
endsnippet

snippet model-ref-file "Generate a model ref file"
/**
 * $1 Model
 * ${2:Description}
 *
 * @see ${3:Parent model}
 * @author Daniel Medina
 * Date: `system("date +%Y-%m-%d")`
 */

/** Configs imports */
import {url} from '../../config/database'

/** Modules imports */
import mongoose from 'mongoose'

/** Models imports */

/** Libs imports */

const Schema = mongoose.Schema
const connection = mongoose.createConnection(url)

mongoose.Promise = global.Promise

const $1Schema = new Schema({
	created: Date
}, {
	collection: '$1'
})

const $1 = connection.model('$1', $1Schema)

export { $1Schema, $1 }
endsnippet

snippet controller-file "Generate a controller file"
/**
 * $1 Controller
 * ${2:Description}
 *
 * @author Daniel Medina
 * Date: `system("date +%Y-%m-%d")`
 */

/** Configs imports */

/** Modules imports */

/** Models imports */

/** Libs imports */

/** GET */
export const get = {
	$3
}
endsnippet

snippet middleware-file "Generate a middleware file"
/**
 * $1 Middleware
 * ${2:Description}
 *
 * @author Daniel Medina
 * Date: `system("date +%Y-%m-%d")`
 */

/** Configs imports */

/** Modules imports */

/** Models imports */

/** Libs imports */

/** GET */
export const get = {
	$3
}
endsnippet

snippet controller-new "Insert a new controller"
// Controller: ${1:Name} {{{
/**
 * ${2:Controller description}
 *
 * @async
 * @param {HTTP} request
 * @param {HTTP} response
 */
$1: async (request, response) => {
	try {
		$3
	} catch (error) {
		console.log(error)
	}
}
// }}}
endsnippet

snippet controller-xhr "Controller - return a xhr response"
response.json(${1:Data to return})
endsnippet

snippet middleware-new "Insert a new middleware"
// Middleware: ${1:Name} {{{
/**
 * ${2:Middleware description}
 *
 * @async
 * @param {HTTP} request
 * @param {HTTP} response
 * @param {HTTP} next
 */
$1: async (request, response, next) => {
	try {
		next()
	} catch (error) {
		console.log(error)
	}
}
// }}}
endsnippet

# Requests
snippet flash-error "Flash error"
request.flash('error', '$1')
endsnippet

snippet flash-success "Flash success"
request.flash('success', '$1')
endsnippet

# Responses
snippet redirect-back "Redirect back"
response.redirect('back')
endsnippet

# Tests
snippet test-description "Test description"
// ${1:Description} {{{
describe('$1', function () {
	$2
})
// }}}
endsnippet

snippet test-it "Test it"
// ${1:Description} {{{
it('$1', function () {
 $2
})
// }}}
endsnippet
