# ESLint
snippet eil "Eslint - disable line"
// eslint-disable-line
endsnippet

# Comments
snippet coms "Single line comment"
/** $1 */
endsnippet

snippet comm "Multi line comment"
/**
 * $1
 */
endsnippet

# Functions
snippet fu "Function"
/**
 * ${1:Function description}
 *
 * @param {Type} tag Description
 * @returns {Type} tag
 */
const ${2:Name} = $3 => $4
endsnippet

snippet om "Object method"
/**
 * ${1:Function description}
 *
 * @param {Type} tag Description
 * @returns {Type} tag
 */
${2:Name}: $3 => $4
endsnippet

snippet oma "Object method - asynchronous"
/**
 * ${1:Function description}
 *
 * @async
 * @param {Type} tag Description
 * @returns {Type} tag
 */
${2:Name}: async $3 => $4
endsnippet

snippet fa "Anonymous function"
/**
 * ${1:Function description}
 *
 * @param {Type} tag Description
 * @returns {Type} tag
 */
$2 => $3
endsnippet

snippet af "Asynchronous function"
/**
 * ${1:Function description}
 *
 * @async
 * @param {Type} tag Description
 * @returns {Type} tag
 */
const ${2:Name} = async $3 => $4
endsnippet

snippet afa "Asynchronous anonymous function"
/**
 * ${1:Function description}
 *
 * @async
 * @param {Type} tag Description
 * @returns {Type} tag
 */
async $2 => $3
endsnippet

snippet afe "Asynchronous code execution"
/**
 * Asynchronous code execution
 *
 * @async
 * @throws Will throw an error to the console if it catches one
 */
(async function () {
	try {
		$1
	} catch (error) {
		console.log(error)
	}
}())
endsnippet

snippet mdlm "Generate a model file"
/**
 * $1 Model
 * ${2:Description}
 *
 * @author Daniel Medina
 * Date: `system("date +%Y-%m-%d")`
 */

/** Configs imports */
import {url} from '../../config/database'

/** Modules imports */
import mongoose from 'mongoose'

/** Models imports */

const connection = mongoose.createConnection(url)
mongoose.Promise = global.Promise
const Schema = mongoose.Schema
const $1Schema = new Schema({
	created: Date
}, {
	collection: '$3'
})

module.exports = connection.model('$1', $1Schema)
endsnippet

snippet mdlrm "Generate a model ref file"
/**
 * $1 Model
 * ${2:Description}
 *
 * @see ${3:Parent model}
 * @author Daniel Medina
 * Date: `system("date +%Y-%m-%d")`
 */

/** Configs imports */
import {url} from '../../config/database'

/** Modules imports */
import mongoose from 'mongoose'

/** Models imports */

/** Libs imports */

const Schema = mongoose.Schema
const connection = mongoose.createConnection(url)

mongoose.Promise = global.Promise

const $1Schema = new Schema({
	created: Date
}, {
	collection: '$3'
})

const $1 = connection.model('$1', $1Schema)

export { $1Schema, $1 }
endsnippet

snippet cm "Generate a controller file"
/**
 * $1 Controller
 * ${2:Description}
 *
 * @author Daniel Medina
 * Date: `system("date +%Y-%m-%d")`
 */

/** Configs imports */

/** Modules imports */

/** Models imports */

/** Libs imports */

/** Exporting the controller */
module.exports = {
	$3
}
endsnippet

snippet mm "Generate a middleware file"
/**
 * $1 Middleware
 * ${2:Description}
 *
 * @author Daniel Medina
 * Date: `system("date +%Y-%m-%d")`
 */

/** Configs imports */

/** Modules imports */

/** Models imports */

/** Libs imports */

/** Exporting the middleware */
module.exports = {
	$3
}
endsnippet

snippet ci "Insert a new controller"
// $1 {{{
/**
 * ${2:Controller description}
 *
 * @async
 * @param {HTTP} request
 * @param {HTTP} response
 */
$1: async (request, response) => {
	try {
		$3
	} catch (error) {
		console.log(error)
	}
}
// }}}
endsnippet

snippet mi "Insert a new middleware"
// $1 {{{
/**
 * ${2:Middleware description}
 *
 * @async
 * @param {HTTP} request
 * @param {HTTP} response
 * @param {HTTP} next
 */
$1: async (request, response, next) => {
	try {
		next()
	} catch (error) {
		console.log(error)
	}
}
// }}}
endsnippet

# Requests
snippet fe "Flash error"
request.flash('error', '$1')
endsnippet

snippet fs "Flash success"
request.flash('success', '$1')
endsnippet

# Responses
snippet rb "Redirect back"
response.redirect('back')
endsnippet

# Tests
snippet td "Test description"
// ${1:Description} {{{
describe('$1', function () {
	$2
})
// }}}
endsnippet

snippet tit "Test it"
// ${1:Description} {{{
it('$1', function () {
 $2
})
// }}}
endsnippet
